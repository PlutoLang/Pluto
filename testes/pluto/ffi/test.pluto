if os.platform == "windows" then
    os.execute("clang -std=c++17 --shared -o lib.dll lib.cpp")
else
    os.execute("clang -std=c++17 -lstdc++ --shared -fPIC -o liblib.so lib.cpp")
end

local ffi = require "ffi"

local lib = ffi.open(os.platform == "windows" ? "lib" : "./liblib.so")
assert(lib:value("i32", "MY_MAGIC_INT") == 69)
assert(lib:wrap("i32", "add", "i32", "i32")(38, 4) == 42)

-- 'lib' can be used like any old table
lib.add = lib:wrap("i32", "add", "i32", "i32")
assert(lib.add(32, 10) == 42)
lib.add = nil

-- lib:cdef provides a subset of C as an alternative to the above usage
lib:cdef[[
int MY_MAGIC_INT;

int add(int a, int b);
]]
assert(lib.MY_MAGIC_INT == 69)
assert(lib.add(1, 2) == 3)

-- Structs
local Colour = ffi.struct[[
    struct Colour {
        uint8_t r;
        uint8_t g;
        uint8_t b;
    };
]]
assert(ffi.sizeof(Colour) == 3)
assert(ffi.offsetof(Colour, "r") == 0)
assert(ffi.offsetof(Colour, "g") == 1)
assert(ffi.offsetof(Colour, "b") == 2)
local colour = new Colour()
assert(ffi.sizeof(colour) == 3)
assert(ffi.offsetof(colour, "r") == 0)
assert(ffi.offsetof(colour, "g") == 1)
assert(ffi.offsetof(colour, "b") == 2)
colour.r = 255
colour.g = 0
colour.b = 127
assert(colour.r == 255)
assert(colour.g == 0)
assert(colour.b == 127)

-- ffi.cdef can be used to any number of structs which will be stored on the FFI library itself
ffi.cdef[[
struct Colour {
    uint8_t r;
    uint8_t g;
    uint8_t b;
};

struct Human {
    const char* name;
};
]]

assert(ffi.sizeof("Colour") == 3)
assert(ffi.offsetof("Colour", "r") == 0)
assert(ffi.offsetof("Colour", "g") == 1)
assert(ffi.offsetof("Colour", "b") == 2)

colour = ffi.new("Colour")
colour.r = 255
colour.g = 0
colour.b = 127
assert(colour.r == 255)
assert(colour.g == 0)
assert(colour.b == 127)

local human = ffi.new("Human")
human.name = "John"
assert(human.name == "John")

local Vector3 = ffi.struct[[
    struct Vector3 {
        float x;
        float y;
        float z;
    };
]]
assert(ffi.sizeof(Vector3) == 3 * 4)
assert(ffi.offsetof(Vector3, "x") == 0)
assert(ffi.offsetof(Vector3, "y") == 4)
assert(ffi.offsetof(Vector3, "z") == 8)
local position = Vector3.new()
assert(ffi.sizeof(position) == 3 * 4)
assert(ffi.offsetof(position, "x") == 0)
assert(ffi.offsetof(position, "y") == 4)
assert(ffi.offsetof(position, "z") == 8)

ffi.cdef[[
struct PointedAt {
};

struct PointsAt {
    PointedAt *target;
};
]]
local pointed_at = ffi.new("PointedAt")
local points_at = ffi.new("PointsAt")
points_at.target = pointed_at

try
    lib:cdef[[void non_existent();]]
    assert(false) -- unreachable, cdef should throw
catch e then
    assert("could not find" in e)
end

ffi.cdef[[
struct Result {
    int sum;
    int product;
};
]]
lib:cdef[[
void quick_maffs(Result *out, int a, int b);
]]
local res = ffi.new("Result")
lib.quick_maffs(res, 3, 3)
assert(res.sum == 6)
assert(res.product == 9)

lib:cdef[[
void throw_exception(const char* msg);
void throw_int(int value);
]]
if os.platform == "macos" and os.arch == "arm, 64-bit" then
    -- Apparently, on ARM64, MacOS is not able to catch the exception here correctly.
    assert("C++ exception" in select(2, pcall(|| -> lib.throw_exception("oh no"))))
else
    assert("C++ exception: oh no" in select(2, pcall(|| -> lib.throw_exception("oh no"))))
end
assert("C++ exception" in select(2, pcall(|| -> lib.throw_int(69))))

-- Float tests
local FloatTestStruct = require"ffi".struct([[
    struct FloatTestStruct {
        float f;
        double d;
    };
]])
local float_test_inst = new FloatTestStruct()
float_test_inst.f = 69
float_test_inst.d = 420
assert(float_test_inst.f == 69)
assert(float_test_inst.d == 420)

-- Allocations
local pIn = ffi.alloc(13)
local pOut = ffi.alloc(13)
assert(ffi.read(pIn) == "\0":rep(13))
assert(ffi.read(pOut) == "\0":rep(13))
ffi.write(pIn, "Hello, world!")
assert(ffi.read(pIn) == "Hello, world!")
lib:cdef[[
void buffer_test(uint8_t* in, size_t inlen, uint8_t* out, size_t outlen);
]]
lib.buffer_test(pIn, 13, pOut, 13)
assert(ffi.read(pOut) == "Hello, world!")

-- Callbacks
if ffi.callback then
    local cb = ffi.callback("i32", "i32", function(val)
        return val + 69
    end)
    lib:wrap("void", "set_cb", "ptr")(cb)
    assert(lib:wrap("i32", "call_cb", "i32")(42) == 42 + 69)

    assert(not cb:blocking())
    cb:blocking(true)
    assert(cb:blocking())
    lib:wrap("void", "call_cb_async")()
    repeat
        cb:tick()
    until lib:value("i32", "cb_async_res") ~= 0
    assert(lib:value("i32", "cb_async_res") == 90)

    cb:blocking(false)
    assert(not cb:blocking())
    assert(cb:defaultreturn() == 0)
    cb:defaultreturn(1337)
    assert(cb:defaultreturn() == 1337)
    lib:wrap("void", "call_cb_async")()
    repeat
        cb:tick()
    until lib:value("i32", "cb_async_res") ~= 90
    assert(lib:value("i32", "cb_async_res") == 1337)

    cb = ffi.callback("i32", "i32", function()
        error("oops")
    end)
    cb:defaultreturn(-1)
    lib:wrap("void", "set_cb", "ptr")(cb)
    assert(cb:callcount() == 0)
    assert(lib:wrap("i32", "call_cb", "i32")(42) == -1)
    assert(cb:callcount() == 1)
end

-- Finally, remove the library from scope and ensure that it's not unloaded while its functions are still accessible
local add = lib.add
lib = nil
collectgarbage()
assert(add(32, 10) == 42)
