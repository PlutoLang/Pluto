print "Welcome to the test suite."

-- Testing warnings
do
    local function assert_warn(code)
        assert(wcall(function(msg)
            load(code)()
        end) ~= "")
    end
    assert_warn([[local a; local a]]) -- var-shadow
    assert_warn([[local a = 69; local b: string = a]]) -- type mismatch in local-to-local assignment
    assert_warn([[g = 69; local l: string = g]]) -- type mismatch in global-to-local assignment
end

-- Testing type hints (there should be no warnings here)
do
    local function takesInt(a: int) end
    takesInt(1)
    local function takesFloat(a: float) end
    takesFloat(1.0)
    local function takesNumber(a: number) end
    takesNumber(1)
    takesNumber(1.0)
    -- void|string
    local function f1(): ?string
        if true then
            return
        end
        return ""
    end
    local function f2(): ?string
        if true then
            return ""
        end
    end
    -- possible void|string false-positve
    local function f3(): string
        if true then
        end
        return ""
    end
    -- nil|string
    local function f4(): ?string
        if true then
            return ""
        end
        return nil
    end
    local function f5(): ?string
        if true then
            return nil
        end
        return ""
    end

    -- TypeHint::merge should copy over function info
    local f = function(a) end
    f(1)
end

print "Testing compound assignment."
do
    local a, b = 1, 2
    a += 1
    b += 1
    assert(a == 2)
    assert(b == 3)

    a, b = 1, 2
    a -= 1
    b -= 1
    assert(a == 0)
    assert(b == 1)

    a, b = 1, 2
    a *= 2
    b *= 2
    assert(a == 2)
    assert(b == 4)

    a, b = 1, 2
    a %= 2
    b %= 2
    assert(a == 1)
    assert(b == 0)

    a, b = 1, 2
    a ^= 2
    b ^= 2
    assert(a == 1.0)
    assert(b == 4.0)

    a, b = 1, 2
    a **= 2
    b **= 2
    assert(a == 1.0)
    assert(b == 4.0)

    a, b = 1, 2
    a |= 1
    b |= 1
    assert(a == 1)
    assert(b == 3)

    a, b = 1, 2
    a &= 1
    b &= 1
    assert(a == 1)
    assert(b == 0)

    a, b = 1, 2
    a /= 1
    b /= 2
    assert(a == 1.0)
    assert(b == 1.0)

    a, b = 1, 2
    a //= 1
    b //= 2
    assert(a == 1)
    assert(b == 1)

    a, b = 1, 2
    a <<= 1
    b <<= 1
    assert(a == 2)
    assert(b == 4)

    a, b = 1, 2
    a >>= 1
    b >>= 1
    assert(a == 0)
    assert(b == 1)
end

print "Testing string indexing."
do
    local str = "abc"
    assert(str[0] == nil)
    assert(str[1] == "a")
    assert(str[2] == "b")
    assert(str[3] == "c")
    assert(str[4] == nil)
    assert(str[5] == nil)
    assert(str[-1] == "c")
    assert(str[-2] == "b")
    assert(str[-3] == "a")
    assert(str[-4] == nil)
    assert(str[-5] == nil)
end

print "Testing continue statement."
do
    local t = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
    local sum = 0
    for index, value in ipairs(t) do
        if value == 5 then
            continue
        end
        sum += value
    end
    assert(sum == 40)

    sum = 0
    for i = 1, 10 do
        if i == 5 then
            continue
        end
        sum += i
    end
    assert(sum == 50)

    local lines = {
        "This",
        "Is",
        "Some",
        "Lines",
    }

    for index, line in ipairs(lines) do
        if index == 1 and line == "This" then
            continue
        elseif index == #lines and line == "Lines" then
            continue
        end
        assert(line != "This" and line != "Lines")
    end
end

print "Testing table length cache."
do
    local t = {}
    for i = 1, 1000 do
        t[i] = "abc"
    end
    assert(#t == 1000, #t)

    for i = 1, 100 do
        table.remove(t, i + math.random(1, 5))
    end
    assert(#t == 900, #t)

    local metatest = setmetatable({}, { __len = function () return 5 end })
    assert(#metatest == 5, #metatest)

    t = {}
    for i = 1, 1000 do
        table.insert(t, "Hello")
        table.insert(t, "World")
    end
    assert(#t == 2000)

    t = {}
    for i = 1, 1000 do
        rawset(t, i, "Hello")
    end
    assert(#t == 1000)
end

print "Testing null coalescing operator."
do
    _G.zz = false
    z = _G.zz
    a = z
    b = "hello"
    c = a ?? b
    assert(c == false)
    _G.zz = nil
    z = _G.zz
    a = z
    b = "hello"
    c = a ?? b
    assert(c == "hello")
    local zz = false
    local z = zz
    local a = z
    local b = "hello"
    local c = a ?? b
    assert(c == false)
    zz = nil
    z = zz
    a = z
    b = "hello"
    c = a ?? b
    assert(c == "hello")
    a = false
    b = "hello"
    a ??= b
    assert(a == false)
    a = nil
    a ??= b
    assert(a == "hello")
end

print "Testing safe navigation."
do
    local a = A?.B?.C?.D
    assert(a == nil)
    a = A?["B"]?["C"]?["D"]
    assert(a == nil)
    a = A?["B"]?["C"]?["D"]?[-5]?[0]
    local T = {}
    T.K = {}
    T.K.Z = {}
    assert(T?.K?.Z == T.K.Z)

    local t = { [-1] = 1 }
    assert(t?[-1] == 1)
end

print "Testing shorthand ternary."
do
    local a = 3
    assert((true ? "yes" : "no") == "yes")
    assert((false ? "yes" : "no") == "no")
    assert((a ? "yes" : "no") == "yes")
    assert((a == 3 ? "yes" : "no") == "yes")
    assert((a == 4 ? "yes" : "no") == "no")
    assert((3 == a ? "yes" : "no") == "yes")
    assert((4 == a ? "yes" : "no") == "no")
end

print "Testing 'in' expressions."
if ("hel" in "hello") != true then error() end
if ("abc" in "hello") != false then error() end
do
    local t = {
        apple = true,
        [69] = true,
    }
    assert("apple" in t)
    assert("banana" in t == false)
    assert(42 in t == false)
    assert(69 in t)
    assert(true in t == false)
    assert(false in t == false)
end
do
    -- table must be global for this failure case
    t = {
        subt = {}
    }
    local function proxy(b)
        assert(b == false)
    end
    proxy(42 in t.subt)
    t = nil
end
do
    -- temporary table
    assert("apple" in { apple = true })
    assert(not "banana" in { apple = true })
    assert(type("apple" in { apple = true }) == "boolean")
end

print "Testing break N syntax."
do
    local sum = 0
    for i = 1, 10 do
        for ii = 1, 10 do
            sum = sum + ii + i
            break 1
        end
        sum = sum + i
    end
    assert(sum == 120)
end

do
    local sum = 0
    for i = 1, 10 do
        for ii = 1, 10 do
            sum = sum + ii + i
            break 2
        end
        sum = sum + i
    end
    assert(sum == 2)
end

do
    local sum = 0
    for i = 1, 10 do
        for ii = 1, 10 do
            sum = sum + ii + i
            for iii = 1, 10 do
                sum = sum + iii + ii + i
                break 3
            end
        end
        sum = sum + i
    end
    assert(sum == 5)
end

do
    while true do
        if true then
            break
        end
    end
end

print "Testing switch statement."
do
    local value = 5
    pluto_switch (value) do
        case 5:
        break
        default:
        error()
    end
    value = 3
    pluto_switch value do
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        break
        default:
        error()
    end
    do
        local casecond <const> = 3
        pluto_switch value do
            case casecond:
            break
            default:
            error()
        end
    end
    do
        local casecond = 3
        pluto_switch value do
            case casecond:
            break
            default:
            error()
        end
    end
    do
        local casecond <const> = 3
        pluto_switch value do
            default:
            error()
            case casecond:
        end
    end
    do
        local casecond = 3
        pluto_switch value do
            default:
            error()
            case casecond:
        end
    end
    value = +3
    pluto_switch value do
        case +1:
        case +2:
        case +3:
        case +4:
        case +5:
        break
        default:
        error()
    end
    value = "foo"
    pluto_switch (value) do
        case "foo":
        break
        default:
        error()
    end
    pluto_switch (value) do
        case "abc":
        case "124":
        case nil:
        case false:
        case true:
        case "23420948239":
        case "foo":
        case 1238123:
        case -2409384029842:
        case "awweee":
        break
        default:
        error()
    end
    value = nil
    pluto_switch (value) do
        case -1:
        case nil:
        case -2:
        break
        default:
        error()
    end
    value = -24389
    pluto_switch (value) do
        case "aawdkawmlwadmlaw":
        case "q49324932":
        case nil:
        case "130-91230921":
        case false:
        case 231923:
        case true:
        case -234234:
        case -24389:
        case 23429:
        case "bar":
        case "foobar":
        case "barfoo":
        break
        default: 
        error()
    end
    value = -1
    pluto_switch (value) do
        case "aawdkawmlwadmlaw":
        case "q49324932":
        case nil:
        case "130-91230921":
        case false:
        case 231923:
        case true:
        case -234234:
        case -24389:
        case 23429:
        case "bar":
        case "foobar":
        case "barfoo":
        error()
    end
    value = -3.14
    pluto_switch (value) do
        case "aawdkawmlwadmlaw":
        case "q49324932":
        case nil:
        case "130-91230921":
        case false:
        case -3.14:
        case true:
        case -234234:
        case -24389:
        case 23429:
        case "bar":
        case "foobar":
        case "barfoo":
        break
    end
    value = -3.3
    pluto_switch (value) do
        case "aawdkawmlwadmlaw":
        case "q49324932":
        case nil:
        case "130-91230921":
        case false:
        case -3.15:
        case true:
        case -234234:
        case -24389:
        case 23429:
        case "bar":
        case "foobar":
        case "barfoo":
        error()
    end
    t = 0
    value = -3.15
    pluto_switch (value) do
        case "aawdkawmlwadmlaw":
        case "q49324932":
        case nil:
        case "130-91230921":
        case false:
        case -3.15:
        case true:
        case -234234:
        case -24389:
        case 23429:
        case "bar":
        case "foobar":
        case "barfoo":
        t = true
    end
    assert(t == true)
    t = 0
    value = -3.15
    pluto_switch (value) do
        case "aawdkawmlwadmlaw":
        case "q49324932":
        case nil:
        case "130-91230921":
        case false:
        case -3.15:
        case true:
        case -234234:
        case -24389:
        case 23429:
        case "bar":
        case "foobar":
        case "barfoo":
        t = true
        break
        default:
        t = false
    end
    assert(t == true)
    t = 0
    value = 3
    pluto_switch value do
        case 1:
        default:
        error()
        case 3:
        t = true
    end
    assert(t == true)
    local function switchfunc(a)
        switch a do
            case 1: -- return before case
            return
            case 2:
            return 2
            case 3: -- return before defualt
            return
            default:
            return
        end
        return 3
    end
    assert(switchfunc(1) == nil)
    assert(switchfunc(2) == 2)
    assert(switchfunc(3) == nil)
end
do
    switch true do
        default:
            error()
        case (87 == 87):
    end
end
do
    local x = 3
    local y = 2
    switch x do
        default:
            error()
        case y + 1: -- x == y + 1
    end
end
do
    local function getResponse(word)
        switch word do
            case "hi", "hello":
                return "Greetings!"
            default:
                return "Unrecognised word"
            case "bye", "goodbye":
                return "Farewell!"
        end
    end
    assert(getResponse("hi") == "Greetings!")
    assert(getResponse("hello") == "Greetings!")
    assert(getResponse("bye") == "Farewell!")
    assert(getResponse("goodbye") == "Farewell!")
    assert(getResponse("deez") == "Unrecognised word")
end

print "Testing switch expression."
do
    local function int2eng(i)
        return switch i do
            case 1 -> "One"
            case 2 -> "Two"
            default -> "Other"
        end
    end
    assert(int2eng(1) == "One")
    assert(int2eng(2) == "Two")
    assert(int2eng(69) == "Other")
end
do
    local function int2eng(i)
        local ret = switch i do
            case 1 -> "One"
            case 2 -> "Two"
            default -> "Other"
        end
        return ret
    end
    assert(int2eng(1) == "One")
    assert(int2eng(2) == "Two")
    assert(int2eng(69) == "Other")
end
do
    local function getResponse(word)
        return switch word do
            case "hi", "hello" -> "Greetings!"
            default -> "Unrecognised word"
            case "bye", "goodbye" -> "Farewell!"
        end
    end
    assert(getResponse("hi") == "Greetings!")
    assert(getResponse("hello") == "Greetings!")
    assert(getResponse("bye") == "Farewell!")
    assert(getResponse("goodbye") == "Farewell!")
    assert(getResponse("deez") == "Unrecognised word")
end
-- Test method call within casecond
do
    local class Human
        function __construct(public name)
        end

        function getName()
            return self.name
        end
    end
    local h = new Human("John")
    local str = switch "John" do
        case h:getName() -> "Same name"
        default -> "Different name"
    end
    assert(str == "Same name")
end
-- Test that switchexpr doesn't displace registers so we get "attempt to call a string value" or something
do
    class Human
        function __construct(public name)
        end

        function getName()
            return self.name
        end
    end
    local h = new Human("John")
    assert(switch "John" do
        case (h:getName()) -> "Same name"
        default -> "Different name"
    end)
end

print "Testing table freezing."
do
    local t = table.freeze({ 1, 2, 3, "hello", "world" })
    local status, _ = pcall(function () t.key = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () t["key"] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () t[1] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () t[66] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () t[function () end] = "abc" end)
    assert(status == false, "expected error")

    t = { 1, 2, 3, "hello", "world" }
    status, _ = pcall(function () t.key = "abc" end)
    assert(status == true, "unexpected error")
    status, _ = pcall(function () t["key"] = "abc" end)
    assert(status == true, "unexpected error")
    status, _ = pcall(function () t[1] = "abc" end)
    assert(status == true, "unexpected error")
    status, _ = pcall(function () t[66] = "abc" end)
    assert(status == true, "unexpected error")
    status, _ = pcall(function () t[function () end] = "abc" end)
    assert(status == true, "unexpected error")

    --[[
    table.freeze(_G)
    status, _ = pcall(function () _G.string = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () _G["string"] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () _G[1] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () _G[66] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () _G[function () end] = "abc" end)
    assert(status == false, "expected error")

    table.freeze(_ENV)
    status, _ = pcall(function () _ENV.string = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () _ENV["string"] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () _ENV[1] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () _ENV[66] = "abc" end)
    assert(status == false, "expected error")
    status, _ = pcall(function () _ENV[function () end] = "abc" end)
    assert(status == false, "expected error")
    --]] --> Doing this will break tests done with dofile(), since the environment is reused.
end

print "Testing standard library additions."
do
    local crypto = require("crypto")
    assert(crypto.fnv1("hello world") == 0x7DCF62CDB1910E6F)
    assert(crypto.fnv1a("hello world") == 8618312879776256743)
    assert(crypto.joaat("hello world") == 1045060183)
    assert(crypto.hexdigest(1045060183) == "0x3e4a5a57")
    assert(crypto.joaat("hello world") == tonumber(crypto.hexdigest(crypto.joaat("hello world"))))
    -- Constexpr
    assert($crypto.fnv1("hello world") == 0x7DCF62CDB1910E6F)
    assert($crypto.fnv1a("hello world") == 8618312879776256743)
    assert($crypto.joaat("hello world") == 1045060183)
    assert($crypto.hexdigest(1045060183) == "0x3e4a5a57")
    assert($crypto.joaat("hello world") == $tonumber($crypto.hexdigest($crypto.joaat("hello world"))))
end
if _PSOUP then -- Soup is linked.
    do
        local base64 = require("base64")
        assert(base64.encode("Hello") == "SGVsbG8")
        assert(base64.decode("SGVsbG8") == "Hello")
        assert(base64.url_encode("Hello") == "SGVsbG8")
        assert(base64.url_decode("SGVsbG8") == "Hello")
        assert(base64.decode(base64.encode("Hello", true)) == "Hello")
    end
else
    print("Soup is not linked, skipping relevant tests.")
end
do
    local t = { key = "value" }
    table.insert(t, 0)
    table.insert(t, "Hello")
    table.insert(t, true)
    assert(table.contains(t, "Hello") == 2)
    assert(table.contains(t, "World") == nil)
    assert(table.contains(t, true) == 3)
    assert(table.contains(t, false) == nil)
    assert(table.contains(t, 0) == 1)
    assert(table.contains(t, 1) == nil)
    assert(table.contains(t, "value") == "key")
    assert(string.isascii("hello world") == true)
    assert(string.isascii("hello.world") == true)
    assert(string.isascii("hello1world") == true)
    assert(string.isascii("hello📙world") == false)
    assert(string.islower("hello world") == false)
    assert(string.islower("helloworld") == true)
    assert(string.islower("hello1world") == false)
    assert(string.isalpha("hello world") == false)
    assert(string.isalpha("helloworld") == true)
    assert(string.isalpha("hello1world") == false)
    assert(string.isalpha("hello?world") == false)
    assert(string.isupper("HELLOWORLD") == true)
    assert(string.isupper("HELLO WORLD") == false)
    assert(string.isupper("HELLO?WORLD") == false)
    assert(string.isalnum("abc123") == true)
    assert(string.isalnum("abc 123") == false)
    assert(string.isalnum("abc?123") == false)
    assert(string.iswhitespace("   \t   \f \n \r\n") == true)
    assert(string.iswhitespace("\t\f   \r\n \r \n \t z") == false)
    assert(string.contains("hello world", "world") == true)
    assert(string.contains("hello world", "z") == false)
    assert(string.endswith("hello world", "rld") == true)
    assert(string.endswith("hello world", "trc") == false)
    assert(string.startswith("hello world", "hello") == true)
    assert(string.startswith("hello world", "truck") == false)
    assert(string.strip("???hello world???", "?") == "hello world")
    assert(string.strip("123hello world123", "123") == "hello world")
    assert(string.lstrip("???hello world???", "?") == "hello world???")
    assert(string.lstrip("12hello world12", "12") == "hello world12")
    assert(string.rstrip("???hello world???", "?") == "???hello world")
    t = string.split("hello world abc", " ")
    assert(t[1] == "hello")
    assert(t[2] == "world")
    assert(t[3] == "abc")
    local before, after = string.partition("hello.wor.ld", ".")
    assert(before == "hello")
    assert(after == "wor.ld")
    before, after = string.partition("hello.wor.ld", ".", true)
    assert(before == "hello.wor")
    assert(after == "ld")
    assert(string.casefold("HELLO WORLD", "hello world") == true)
    assert(string.casefold("HELLO WORLD", "hello worlz") == false)
    assert(string.lfind("hello world", "wor") == (string.find("hello world", "wor", 1, true)))
    assert(string.rfind("world hello world", "world") == 13)
    assert(string.rfind("hello x", "world") == nil)
    assert(string.find_first_of("hello world", "?[[w") == 7)
    assert(string.find_first_of("hello world", "?[[z") == nil)
    assert(string.find_first_not_of("hello world", "hello") == 6)
    assert(string.find_first_not_of("hello world", "hello world") == nil)
    assert(string.find_last_of("orld hello world cccc", "orld") == 16)
    assert(string.upper("hello", 1) == "Hello")
    assert(string.upper("hello", 2) == "hEllo")
    assert(string.upper("hello", -1) == "hellO")
    assert(string.upper("hello", -2) == "helLo")
    assert(string.upper("hello", -6) == "hello")
    assert(string.upper("hello", 6) == "hello")
    assert(string.upper("hello") == "HELLO")
    assert(string.lower("HELLO") == "hello")
    assert(string.lower("HELLO", 1) == "hELLO")
    assert(string.lower("HELLO", 2) == "HeLLO")
    assert(string.lower("HELLO", -1) == "HELLo")
    assert(string.lower("HELLO", -2) == "HELlO")
    assert(string.lower("HELLO", -14) == "HELLO")
end
do
    local t = { 5, 4, 3, 2, 1 }
    t = table.filter(t, |x| -> x % 2 ~= 0)
    assert(t[1] == 5)
    assert(t[2] == 3)
    assert(t[3] == 1)

    local menu = {
        { id = 1, name = "Pizza" },
        { id = 2, name = "Doener" }
    }
    local betterDoener = { id = 2, name = "Better Doener" }
    menu = table.map(menu, |item| -> item.id == betterDoener.id ? betterDoener : item)
    assert(menu[2].name == "Better Doener")
end

print "Testing default table metatable."
do
    -- Note: This behavior may be disabled by defining the PLUTO_NO_DEFAULT_TABLE_METATABLE macro.

    local t = { "apple", "banana" }
    assert(t:contains("apple") == 1)
    assert(t:contains("banana") == 2)
    assert(t:contains("orange") == nil)
end

print "Testing default arguments."
do
    local CONST_VAL <const> = 69
    local function f(a = 1, b = CONST_VAL, c = -2, d = +3, e = "Hello")
        return a, b, c, d, e
    end
    local a, b, c, d, e = f()
    assert(a == 1)
    assert(b == 69)
    assert(c == -2)
    assert(d == +3)
    assert(e == "Hello")

    local function tf(t = { 1, 2, 3 })
        return t
    end
    local t = tf()
    assert(#t == 3)
    assert(t[1] == 1)
    assert(t[2] == 2)
    assert(t[3] == 3)
end
do
    local function f(a = true)
        return a
    end
    assert(f() == true)
    assert(f(false) == false)
end
do
    local t = {
        function foo(a = "hello")
            return a
        end
    }
    function t:bar(a = "world")
        return a
    end
    assert(t:foo() == "hello")
    assert(t:bar() == "world")
end

print "Testing walrus operator."
do
    if a := 3 then
    else
        error()
    end
    assert(a == 3)

    if b := nil then
        error()
    end

    -- Complex Context: Walrus in function body of a lambda function that is passed an argument
    local function executeFunc(f)
        f()
    end
    executeFunc(function()
        if c := 3 then
            assert(c == 3)
        else
            error()
        end
    end)

    --[[local function walrus_test_helper(v1, v2)
        assert(v1 == "hi")
        assert(v2 == nil)
    end
    walrus_test_helper(c := "hi")]]
end

print "Testing for-as loop."
do
    local t = { "a", "b", "c" }
    local k = 1
    for t as v do
        assert(t[k] == v)
        k = k + 1
    end
end

print "Testing enums."
do
    enum begin
        UTE_ONE,
        UTE_TWO,
    end
    assert(UTE_ONE == 1)
    assert(UTE_TWO == 2)

    enum NamedTestEnum begin
        NTE_ONE,
        NTE_TWO
    end
    assert(NTE_ONE == 1)
    assert(NTE_TWO == 2)

    enum CStyleEnum begin
        CSE_INIT = 0,
        CSE_CONTINUED
    end
    assert(CSE_INIT == 0)
    assert(CSE_CONTINUED == 1)

    enum UnaryTestEnum begin
        UNAR_INVALID = -1,
        UNAR_ONE = +1
    end
    assert(UNAR_INVALID == -1)
    assert(UNAR_ONE == +1)

    enum ConstyEnum begin
        CST_VAL = 1,
        CPY_VAL = CST_VAL,
    end
    assert(CST_VAL == 1)
    assert(CPY_VAL == 1)

    enum RelativeEnum begin
        RE_MAGIC = 42,
        RE_MAGIC_PLUS_2 = RE_MAGIC + 2
    end
    assert(RE_MAGIC == 42)
    assert(RE_MAGIC_PLUS_2 == 44)
end
do
    enum class colours begin
        red,
        green,
        blue
    end
    assert(colours.red == 1)
    assert(colours.green == 2)
    assert(colours.blue == 3)
    assert(red == nil)
    assert(green == nil)
    assert(blue == nil)
end

print "Testing interpolated strings."
do
    f_string_global = "foo"
    local f_string_local = "bar"
    assert($"a{f_string_global}b{f_string_local}c" == "afoobbarc")
    assert($"{f_string_global}{f_string_local}" == "foobar")
end
do
    local t = { a = "hello" }
    assert($"{t.a} world" == "hello world")
    assert($'{t.a} world' == "hello world")

    local class Person
        name;
        age;

        function __construct(name, age)
            self.name = name
            self.age = age
        end

        function printInformation()
            return $"My name is {self.name} & my age is {self.age}."
        end
    end

    local person = new Person("John", 25)
    assert($"{person:printInformation()}" == "My name is John & my age is 25.")
end
assert($"{true ? 'true' : 'false'} is the value" == "true is the value")

print "Testing ++ operator."
do
    -- expression
    local a = 1
    assert(++a == 2)
    assert(a == 2)
end
do
    -- statement
    local a = 1
    ++a
    assert(a == 2)

    local t = { a = 1 }
    ++t.a
    assert(t.a == 2)
end

print "Testing non-ascii variable names."
do
    local 😉 = "Hello"
    assert(😉 == "Hello")
end

print "Testing binary numerals."
do
    assert(0b11 == 3)
end

print "Testing boolean concatenation."
do
    assert(("aussie version is " .. true) == "aussie version is true")
    assert((true .. false) == "truefalse")
end

print "Testing constant expressions."
do
    assert($crypto.joaat("Pluto") == 32037948)

    -- They can be chained
    assert($crypto.hexdigest($crypto.joaat("hello world")) == "0x3e4a5a57")

    -- They accept compile-time constants as argument
    local str <const> = "Pluto"
    assert($crypto.joaat(str) == 32037948)
end

print "Testing named arguments."
do
    local function getGreeting(greeting, name = "Universe")
        return greeting .. ", " .. name .. "!"
    end
    assert(getGreeting(greeting="Hello", name="World") == "Hello, World!")
    assert(getGreeting(greeting="Hello") == "Hello, Universe!")
    assert(getGreeting(name="World", greeting="Hello") == "Hello, World!")

    local function getName()
        return "Planet"
    end
    assert(getGreeting(name=getName(), greeting="Hello") == "Hello, Planet!")

    local function mixedArgs(file, mode = "r", version = 1)
        return file, mode, version
    end
    local file, mode, version = mixedArgs("Hello", version = 2)
    assert(file == "Hello")
    assert(mode == "r")
    assert(version == 2)
end

print "Testing classes."
do
    local a, b
    class BaseClass
        function __construct()
            a = true
        end
    end

    class ClassWithAnExceptionallySpecificAndLongName extends BaseClass
        function __construct()
            parent:__construct()
            b = true
        end
    end

    local inst = new ClassWithAnExceptionallySpecificAndLongName()
    assert(a == true and b == true)
end
do
    do
        class globalclass
        end
        local class localclass
        end
    end
    assert(globalclass ~= nil)
    assert(localclass == nil)
end
do
    local classexpr = class
        b = true
    end
    assert(classexpr.b == true)
end
do
    local Entity = {
        age = 1
    }

    local class Human extends Entity
    end

    local e = new Entity()
    local h = new Human()
    assert(e.age == 1)
    assert(h.age == 1)
    assert(e instanceof Entity == true)
    assert(e instanceof Human == false)
    assert(h instanceof Entity == true)
    assert(h instanceof Human == true)
end
do
    local class Entity
        __name = "Entity"

        function __construct(name)
            self.name = name
        end
    end

    local class Human extends Entity
        __name = "Human"

        function __construct(name)
            assert(parent.__name == "Entity")
            parent:__construct(name)
        end
    end

    local john = new Human("John")
    assert(john.name == "John")
    assert(john instanceof Entity)
    assert(john instanceof Human)
end
-- Multi-level parent calls
do
    class Entity
        function __construct(name)
            self.name = name
        end
    end

    class Character extends Entity
        function __construct(name)
            parent:__construct(name)
        end
    end

    class Player extends Character
        function __construct(name)
            parent:__construct(name)
        end
    end

    local p = new Player("John")
    assert(p.name == "John")
end
-- Class overriding '__index'
do
    local extraOffset <constexpr> = 10

    class Counter
        __num = 1

        function __index(key)
            if key == "num" then
                return self.__num + extraOffset
            end
            return Counter[key]
        end

        function __newindex(key, value)
            if key == "num" then
                self.__num = value - extraOffset
            end
            rawset(self, key, value)
        end
    end

    local c = new Counter()
    assert(c.num == 1 + extraOffset)
    c.num = 42
    assert(c.num == 42)
end
-- Metamethod inheritance
do
    local class Base
        function __tostring()
            return "A based object"
        end

        function __call()
            return "You called?"
        end
    end

    local class Child extends Base
        function __tostring()
            return parent:__tostring() .. ": The sequel"
        end
    end

    local b = new Base()
    local c = new Child()

    assert(tostring(b) == "A based object")
    assert(tostring(c) == "A based object: The sequel")

    assert(b() == "You called?")
    assert(c() == "You called?")
end
do
    local class ClassParsingTest
        property_no_value
        property_type_hint: string

        public property_public
        protected property_protected
        private property_private
    end
end
-- Constructor promotion
do
    local class Point
        function __construct(public x: int, public y: int = 0)
        end
    end

    local p = new Point(3)
    assert(p.x == 3)
    assert(p.y == 0)
end
-- 'new' as a statement
do
    local ctored = false
    local method_called = false

    local class TestClass
        function __construct()
            ctored = true
        end

        function method()
            method_called = true
        end
    end

    new TestClass()
    assert(ctored == true)
    assert(method_called == false)
end
do
    local ctored = false
    local method_called = false

    local class TestClass
        function __construct()
            ctored = true
        end

        function method()
            method_called = true
        end
    end

    new TestClass():method()
    assert(ctored == true)
    assert(method_called == true)
end

print "Testing named varargs."
do
    local function f(...a)
        return a
    end
    local t = f("Hello", 1337)
    assert(#t == 2)
    assert(t[1] == "Hello")
    assert(t[2] == 1337)
end

print "Testing export."
do
    local t = load [[export var = 1337

    export function func()
        return true
    end

    export class Clazz
    end
    ]] ()
    assert(t.var == 1337)
    assert(t.func() == true)
    assert(type(t.Clazz) == "table")
end

print "Testing optional parentheses."
do
    assert("a.b.c":split(".")[1] == "a")

    assert({
        static function test()
            return "hello"
        end
    }.test() == "hello")
end

print "Testing table destructuring."
do
    -- Table in dedicated variable
    local t = {
        str = "hello",
        i = 1337
    }
    do
        local { str } = t
        assert(str == "hello")
    end
    do
        local { i } = t
        assert(i == 1337)
    end
    do
        local { str, i } = t
        assert(str == "hello")
        assert(i == 1337)
    end
end
do
    -- Temporary table
    local { i, str = s } = {
        i = 69,
        s = "Hello"
    }
    assert(i == 69)
    assert(s == nil)
    assert(str == "Hello")
end
do
    -- Temporary table, single field
    local { i } = {
        i = 69,
        s = "Hello"
    }
    assert(i == 69)
end
-- Array destructuring
do
    local [a, b, c] = { 1, 2, 3 }
    assert(a == 1)
    assert(b == 2)
    assert(c == 3)
end
do
    local t = { 1, 2, 3 }
    local [a, b, c] = t
    assert(a == 1)
    assert(b == 2)
    assert(c == 3)
end

print "Testing pluto_use."
do
    pluto_use class = false

    local class = { class = "class" }
    assert(class.class == "class")

    pluto_use class

    class Human end
end

print "Testing compile-time conditionals."
do
    local debug_bytecode = string.dump(load([[
        local DEBUG <constexpr> = true
        $if DEBUG then
            print("Script running in debug mode")
        $else
            print("Script running in release mode")
        $end
    ]], ""))
    local release_bytecode = string.dump(load([[
        local DEBUG <constexpr> = false
        $if DEBUG then
            print("Script running in debug mode")
        $else
            print("Script running in release mode")
        $end
    ]], ""))

    assert(debug_bytecode:find("Script running in debug mode") ~= nil)
    assert(debug_bytecode:find("Script running in release mode") == nil)
    assert(release_bytecode:find("Script running in debug mode") == nil)
    assert(release_bytecode:find("Script running in release mode") ~= nil)
end

print "Testing compatibility."
do
    local a = "Hi"
    local t = {a}
    assert(t[1] == "Hi")
    t = {a, nil}
    assert(t[1] == "Hi")
    t = {["func"]=function(p1,p2)end}
    assert(t["func"] ~= nil)

    local myconst <const> = "consty"
    assert(myconst == "consty")

    if true then
        goto if_then_goto_test
        ::if_then_goto_test::
    end
end
do
    local function compat_names(default, parent)
        assert(default == 1)
        assert(parent == 2)
    end
    local default = 1
    local parent = 2
    compat_names(default, parent)
end
do
    local compat_parent_shorthand_syntaxes = {
        parent = true
    }
    assert(compat_parent_shorthand_syntaxes.parent == true)
end
do
    local t = { "a", "b", "c" }
    for k, v in t do
        assert(t[k] == v)
    end
end
assert(("deez" .. 69) == "deez69")

print "Testing universal functions."
do
    os.setlocale("fr-FR.UTF-8")

    pcall(|| -> utonumber("", 69))
    assert(utonumber("1337") == 1337)
    assert(utonumber("1337", 16) == 0x1337)

    pcall(|| -> utostring())
    assert(utostring(1337) == "1337")

    pcall(|| -> string.uformat("%f", ""))
    assert(string.uformat("%.2f", 4.20) == "4.20")

    -- Ensure locale is still the same...
    assert((os.setlocale(nil) == "C") -- or this... for *nix-based systems.
        or (os.setlocale(nil) == "fr-FR.UTF-8") -- For Windows, actually do the assert, tho. :)
        )
end
